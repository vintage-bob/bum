program boilerplate;	uses		support;	const		fileMenuId = 1;	var		useWaitNextEvent: BOOLEAN;	procedure SetUpMenu;		var			fileMenu: menuHandle;	begin		filemenu := NewMenu(fileMenuId, 'File');		appendMenu(fileMenu, 'Quit/q');		InsertMenu(fileMenu, 0);		drawMenuBar;	end;	function MenuCommand (mResult: LONGINT): BOOLEAN;		var			theItem: INTEGER;			theMenu: INTEGER;	begin		MenuCommand := false;		theItem := LoWord(mResult);		theMenu := HiWord(mResult);		case theMenu of			fileMenuId: 				MenuCommand := true;		end;	end;	function doEvent (myEvent: EventRecord): BOOLEAN;		var			theChar: CHAR;			whichWindow: windowPtr;	begin		doEvent := false;		case myEvent.what of			mousedown: 				case FindWindow(myEvent.where, whichWindow) of					inMenuBar: 						doEvent := MenuCommand(MenuSelect(myEvent.where));				end;			keyDown, autoKey: 				begin					theChar := CHR(BitAnd(myEvent.message, charCodeMask));					if BitAnd(myEvent.modifiers, cmdKey) <> 0 then						doEvent := MenuCommand(MenuKey(theChar))				end;		end;	end;	procedure EventLoop;		var			myEvent: EventRecord;			done: BOOLEAN;			eventReceived: BOOLEAN;	begin		useWaitNextEvent := CanUseWaitNextEvent;		done := FALSE;		repeat			if useWaitNextEvent then				begin					eventReceived := WaitNextEvent(everyEvent, myEvent, 6, nil);				end			else				begin					SystemTask;					eventReceived := GetNextEvent(everyEvent, myEvent);				end;			if eventReceived then				begin					done := doEvent(myEvent);				end;		until done;	end;begin	InitManagers;	SetUpMenu;	EventLoop;end.